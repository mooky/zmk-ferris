// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT
// These constants need to be defined above point.h include

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 3000
#define U_MOUSE_MOVE_EXPONENT 2
#define U_MOUSE_MOVE_TIME 500
#define U_MOUSE_MOVE_DELAY 0

//#define ZMK_MOUSE_DEFAULT_SCRL_VAL 100
//#define U_MOUSE_SCROLL_EXPONENT 1
//#define U_MOUSE_SCROLL_TIME 5000
//#define U_MOUSE_SCROLL_DELAY 0

#include <behaviors/num_word.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_bkspc {
            bindings = <&kp BACKSPACE>;
            key-positions = <7 8>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <27 28>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <22 21>;
        };

        combo_kb_nav_toggle {
            bindings = <&tog 4>;
            key-positions = <16 18>;
        };

        combo_m_nav_toggle {
            bindings = <&tog 5>;
            key-positions = <16 17 18>;
        };

        combo_m_scroll {
            bindings = <&tog 6>;
            key-positions = <26 27 28>;
        };

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
        };

        combo_excl {
            bindings = <&kp EXCL>;
            key-positions = <0 10>;
        };

        combo_at {
            bindings = <&kp AT>;
            key-positions = <1 11>;
        };

        combo_hash {
            bindings = <&kp HASH>;
            key-positions = <2 12>;
        };

        combo_dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <3 13>;
        };

        combo_percent {
            bindings = <&kp PERCENT>;
            key-positions = <4 14>;
        };

        combo_caret {
            bindings = <&kp CARET>;
            key-positions = <10 20>;
        };

        combo_amps {
            bindings = <&kp AMPS>;
            key-positions = <11 21>;
        };

        combo_astrk {
            bindings = <&kp ASTRK>;
            key-positions = <12 22>;
        };

        combo_lparen {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <13 23>;
        };

        combo_rparen {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <14 24>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <6 16>;
        };

        combo_equal {
            bindings = <&kp EQUAL>;
            key-positions = <7 17>;
        };

        combo_quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <8 18>;
        };

        combo_lbracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <16 26>;
        };

        combo_rbracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <17 27>;
        };

        combo_bslh {
            bindings = <&kp BSLH>;
            key-positions = <18>;
        };

        combo_smart_word {
            bindings = <&caps_word>;
            key-positions = <11 13>;
        };

        combo_numword {
            bindings = <&num_word 1>;
            key-positions = <12 11 13>;
        };

        combo_lparen {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <12 16 26>;
        };

        combo_rparen {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <12 17 27>;
        };
    };

    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = < 16 17 18 19 >; // List of keys on the right side of the keyboard
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = < 10 11 12 13 >; // List of keys on the left side of the keyboard
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q        &kp W        &kp E         &kp R         &kp T        &kp Y      &kp U         &kp I         &kp O        &kp P
&hml LGUI A  &hml LALT S  &hml LCTRL D  &hml LSHFT F  &kp G        &kp H      &hmr RSHFT J  &hmr RCTRL K  &hmr RALT L  &hmr RGUI SEMI
&kp Z        &kp X        &kp C         &kp V         &kp B        &kp N      &kp M         &kp COMMA     &kp DOT      &kp FSLH
                                        &lt 2 TAB     &kp ENTER    &kp SPACE  &lt 1 BSPC
            >;
        };

        right_layer {
            bindings = <
&none    &kp N7  &kp N8  &kp NUMBER_9  &trans     &trans  &kp F7  &kp F8  &kp F9  &kp F10
&kp N0   &kp N4  &kp N5  &kp N6        &trans     &trans  &kp F4  &kp F5  &kp F6  &kp F11
&kp DOT  &kp N1  &kp N2  &kp N3        &trans     &trans  &kp F1  &kp F2  &kp F3  &kp F12
                         &trans        &kp ESC    &trans  &trans
            >;
        };

        left_layer {
            bindings = <
&trans    &kp LBKT  &kp LBRC  &kp RBRC  &trans       &kp CARET  &kp LPAR   &kp RPAR   &kp RBKT  &kp TILDE
&kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT    &kp ASTRK  &kp MINUS  &kp EQUAL  &kp BSLH  &kp GRAVE
&trans    &trans    &trans    &trans    &trans       &kp AMPS   &kp UNDER  &kp PLUS   &kp PIPE  &trans
                              &trans    &trans       &trans     &trans
            >;
        };

        tri_layer {
            bindings = <
&sys_reset   &trans  &trans  &trans          &bt BT_SEL 0    &trans  &trans  &trans  &trans  &sys_reset
&bootloader  &trans  &trans  &studio_unlock  &bt BT_SEL 1    &trans  &trans  &trans  &trans  &bootloader
&trans       &trans  &trans  &bt BT_CLR      &bt BT_SEL 2    &trans  &trans  &trans  &trans  &trans
                             &trans          &trans          &trans  &trans
            >;
        };

        kb_nav_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans    &kp LC(LS(TAB))  &trans          &kp LC(TAB)      &trans
&trans  &trans  &trans  &trans  &trans    &kp HOME  &kp LEFT_ARROW   &kp UP_ARROW    &kp RIGHT_ARROW  &kp INS
&trans  &trans  &trans  &trans  &trans    &kp END   &kp PAGE_DOWN    &kp DOWN_ARROW  &kp PAGE_UP      &kp DEL
                        &to 0   &trans    &trans    &trans
            >;
        };

        m_nav_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans     &trans          &trans          &trans           &trans
&trans  &trans  &trans  &trans  &trans    &none      &mmv MOVE_LEFT  &mmv MOVE_UP    &mmv MOVE_RIGHT  &none
&trans  &trans  &trans  &trans  &trans    &none      &none           &mmv MOVE_DOWN  &none            &none
                        &to 0   &trans    &mkp LCLK  &mkp RCLK
            >;
        };

        m_scroll_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans          &trans          &trans           &trans
&trans  &trans  &trans  &trans  &trans    &trans  &msc SCRL_LEFT  &msc SCRL_UP    &msc SCRL_RIGHT  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &none           &msc SCRL_DOWN  &none            &trans
                        &to 0   &trans    &trans  &trans
            >;
        };
    };
};
